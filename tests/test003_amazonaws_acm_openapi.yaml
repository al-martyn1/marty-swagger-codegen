openapi: 3.0.0
servers:
  - url: 'http://acm.amazonaws.com/'
info:
  version: '2015-12-08'
  x-release: v4
  title: AWS Certificate Manager
  description: '<fullname>AWS Certificate Manager</fullname> <p>Welcome to the AWS Certificate Manager (ACM) API documentation.</p> <p>You can use ACM to manage SSL/TLS certificates for your AWS-based websites and applications. For general information about using ACM, see the <a href="http://docs.aws.amazon.com/acm/latest/userguide/"> <i>AWS Certificate Manager User Guide</i> </a>.</p>'
  x-logo:
    url: 'https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: acm
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-2015-12-08.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/acm/'
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /:
    post:
      operationId: AddTagsToCertificate
      description: '<p>Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a <code>key</code> and an optional <code>value</code>. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair.</p> <p>You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/tags.html">Tagging ACM Certificates</a>.</p> <p>To remove one or more tags, use the <a>RemoveTagsFromCertificate</a> action. To view all of the tags that have been applied to the certificate, use the <a>ListTagsForCertificate</a> action.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
        '482':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
        '483':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagsToCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteCertificate':
    post:
      operationId: DeleteCertificate
      description: '<p>Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the <a>ListCertificates</a> action or be retrieved by calling the <a>GetCertificate</a> action. The certificate will not be available for use by other AWS services.</p> <note> <p>You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '482':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeCertificate':
    post:
      operationId: DescribeCertificate
      description: Returns detailed metadata about the specified ACM Certificate.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeCertificateResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetCertificate':
    post:
      operationId: GetCertificate
      description: '<p>Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.</p> <note> <p>Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCertificateResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestInProgressException'
        '482':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ImportCertificate':
    post:
      operationId: ImportCertificate
      description: '<p>Imports an SSL/TLS certificate into AWS Certificate Manager (ACM) to use with <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-services.html">ACM''s integrated AWS services</a>.</p> <note> <p>ACM does not provide <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for certificates that you import.</p> </note> <p>For more information about importing certificates into ACM, including the differences between certificates that you import and those that ACM provides, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>AWS Certificate Manager User Guide</i>.</p> <p>To import a certificate, you must provide the certificate and the matching private key. When the certificate is not self-signed, you must also provide a certificate chain. You can omit the certificate chain when importing a self-signed certificate.</p> <p>The certificate, private key, and certificate chain must be PEM-encoded. For more information about converting these items to PEM format, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html#import-certificate-troubleshooting">Importing Certificates Troubleshooting</a> in the <i>AWS Certificate Manager User Guide</i>.</p> <p>To import a new certificate, omit the <code>CertificateArn</code> field. Include this field only when you want to replace a previously imported certificate.</p> <p>This operation returns the <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the imported certificate.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCertificateResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListCertificates':
    post:
      operationId: ListCertificates
      description: Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCertificatesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListTagsForCertificate':
    post:
      operationId: ListTagsForCertificate
      description: 'Lists the tags that have been applied to the ACM Certificate. Use the certificate''s Amazon Resource Name (ARN) to specify the certificate. To add a tag to an ACM Certificate, use the <a>AddTagsToCertificate</a> action. To delete a tag, use the <a>RemoveTagsFromCertificate</a> action.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForCertificateResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RemoveTagsFromCertificate':
    post:
      operationId: RemoveTagsFromCertificate
      description: '<p>Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value.</p> <p>To add tags to a certificate, use the <a>AddTagsToCertificate</a> action. To view all of the tags that have been applied to a specific ACM Certificate, use the <a>ListTagsForCertificate</a> action.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
        '482':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTagsFromCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RequestCertificate':
    post:
      operationId: RequestCertificate
      description: 'Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the <a href="http://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestCertificateResponse'
        '480':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: InvalidDomainValidationOptionsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDomainValidationOptionsException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ResendValidationEmail':
    post:
      operationId: ResendValidationEmail
      description: 'Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking <b>I Approve</b>. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate. For more information about setting up your contact email addresses, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/setup-email.html">Configure Email for your Domain</a>. '
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidStateException'
        '482':
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
        '483':
          description: InvalidDomainValidationOptionsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDomainValidationOptionsException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendValidationEmailRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  schemas:
    AddTagsToCertificateRequest:
      type: object
      required:
        - CertificateArn
        - Tags
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
        Tags:
          $ref: '#/components/schemas/TagList'
    Arn:
      type: string
      pattern: 'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=/,.@-]+)*'
      minLength: 20
      maxLength: 2048
    CertificateBody:
      type: string
      pattern: '-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?'
      minLength: 1
      maxLength: 32768
    CertificateBodyBlob:
      type: string
      minLength: 1
      maxLength: 32768
    CertificateChain:
      type: string
      pattern: '(-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?'
      minLength: 1
      maxLength: 2097152
    CertificateChainBlob:
      type: string
      minLength: 1
      maxLength: 2097152
    CertificateDetail:
      type: object
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
        DomainName:
          $ref: '#/components/schemas/DomainNameString'
        SubjectAlternativeNames:
          $ref: '#/components/schemas/DomainList'
        DomainValidationOptions:
          $ref: '#/components/schemas/DomainValidationList'
        Serial:
          $ref: '#/components/schemas/String'
        Subject:
          $ref: '#/components/schemas/String'
        Issuer:
          $ref: '#/components/schemas/String'
        CreatedAt:
          $ref: '#/components/schemas/TStamp'
        IssuedAt:
          $ref: '#/components/schemas/TStamp'
        ImportedAt:
          $ref: '#/components/schemas/TStamp'
        Status:
          $ref: '#/components/schemas/CertificateStatus'
        RevokedAt:
          $ref: '#/components/schemas/TStamp'
        RevocationReason:
          $ref: '#/components/schemas/RevocationReason'
        NotBefore:
          $ref: '#/components/schemas/TStamp'
        NotAfter:
          $ref: '#/components/schemas/TStamp'
        KeyAlgorithm:
          $ref: '#/components/schemas/KeyAlgorithm'
        SignatureAlgorithm:
          $ref: '#/components/schemas/String'
        InUseBy:
          $ref: '#/components/schemas/InUseList'
        FailureReason:
          $ref: '#/components/schemas/FailureReason'
        Type:
          $ref: '#/components/schemas/CertificateType'
        RenewalSummary:
          $ref: '#/components/schemas/RenewalSummary'
      description: Contains metadata about an ACM certificate. This structure is returned in the response to a <a>DescribeCertificate</a> request.
    CertificateStatus:
      type: string
      enum:
        - PENDING_VALIDATION
        - ISSUED
        - INACTIVE
        - EXPIRED
        - VALIDATION_TIMED_OUT
        - REVOKED
        - FAILED
    CertificateStatuses:
      type: array
      items:
        $ref: '#/components/schemas/CertificateStatus'
    CertificateSummary:
      type: object
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
        DomainName:
          $ref: '#/components/schemas/DomainNameString'
      description: This structure is returned in the response object of <a>ListCertificates</a> action.
    CertificateSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/CertificateSummary'
    CertificateType:
      type: string
      enum:
        - IMPORTED
        - AMAZON_ISSUED
    DeleteCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
    DescribeCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
    DescribeCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: '#/components/schemas/CertificateDetail'
    DomainList:
      type: array
      items:
        $ref: '#/components/schemas/DomainNameString'
      minItems: 1
      maxItems: 100
    DomainNameString:
      type: string
      pattern: '^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$'
      minLength: 1
      maxLength: 253
    DomainStatus:
      type: string
      enum:
        - PENDING_VALIDATION
        - SUCCESS
        - FAILED
    DomainValidation:
      type: object
      required:
        - DomainName
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainNameString'
        ValidationEmails:
          $ref: '#/components/schemas/ValidationEmailList'
        ValidationDomain:
          $ref: '#/components/schemas/DomainNameString'
        ValidationStatus:
          $ref: '#/components/schemas/DomainStatus'
      description: Contains information about the validation of each domain name in the certificate.
    DomainValidationList:
      type: array
      items:
        $ref: '#/components/schemas/DomainValidation'
      minItems: 1
      maxItems: 1000
    DomainValidationOption:
      type: object
      required:
        - DomainName
        - ValidationDomain
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainNameString'
        ValidationDomain:
          $ref: '#/components/schemas/DomainNameString'
      description: Contains information about the domain names that you want ACM to use to send you emails to validate your ownership of the domain.
    DomainValidationOptionList:
      type: array
      items:
        $ref: '#/components/schemas/DomainValidationOption'
      minItems: 1
      maxItems: 100
    FailureReason:
      type: string
      enum:
        - NO_AVAILABLE_CONTACTS
        - ADDITIONAL_VERIFICATION_REQUIRED
        - DOMAIN_NOT_ALLOWED
        - INVALID_PUBLIC_DOMAIN
        - OTHER
    GetCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
    GetCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: '#/components/schemas/CertificateBody'
        CertificateChain:
          $ref: '#/components/schemas/CertificateChain'
    IdempotencyToken:
      type: string
      pattern: \w+
      minLength: 1
      maxLength: 32
    ImportCertificateRequest:
      type: object
      required:
        - Certificate
        - PrivateKey
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
        Certificate:
          $ref: '#/components/schemas/CertificateBodyBlob'
        PrivateKey:
          $ref: '#/components/schemas/PrivateKeyBlob'
        CertificateChain:
          $ref: '#/components/schemas/CertificateChainBlob'
    ImportCertificateResponse:
      type: object
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
    InUseList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    InvalidArnException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The requested Amazon Resource Name (ARN) does not refer to an existing resource.
    InvalidDomainValidationOptionsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: One or more values in the <a>DomainValidationOption</a> structure is incorrect.
    InvalidStateException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: 'Processing has reached an invalid state. For example, this exception can occur if the specified domain is not using email validation, or the current certificate status does not permit the requested operation. See the exception message returned by ACM to determine which state is not valid.'
    InvalidTagException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: 'One or both of the values that make up the key-value pair is not valid. For example, you cannot specify a tag value that begins with <code>aws:</code>.'
    KeyAlgorithm:
      type: string
      enum:
        - RSA_2048
        - RSA_1024
        - EC_prime256v1
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: 'An ACM limit has been exceeded. For example, you may have input more domains than are allowed or you''ve requested too many certificates for your account. See the exception message returned by ACM to determine which limit you have violated. For more information about ACM limits, see the <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html">Limits</a> topic.'
    ListCertificatesRequest:
      type: object
      properties:
        CertificateStatuses:
          $ref: '#/components/schemas/CertificateStatuses'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        MaxItems:
          $ref: '#/components/schemas/MaxItems'
    ListCertificatesResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        CertificateSummaryList:
          $ref: '#/components/schemas/CertificateSummaryList'
    ListTagsForCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
    ListTagsForCertificateResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/TagList'
    MaxItems:
      type: integer
      minimum: 1
      maximum: 1000
    NextToken:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]*'
      minLength: 1
      maxLength: 320
    PrivateKeyBlob:
      type: string
      minLength: 1
      maxLength: 524288
      format: password
    RemoveTagsFromCertificateRequest:
      type: object
      required:
        - CertificateArn
        - Tags
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
        Tags:
          $ref: '#/components/schemas/TagList'
    RenewalStatus:
      type: string
      enum:
        - PENDING_AUTO_RENEWAL
        - PENDING_VALIDATION
        - SUCCESS
        - FAILED
    RenewalSummary:
      type: object
      required:
        - RenewalStatus
        - DomainValidationOptions
      properties:
        RenewalStatus:
          $ref: '#/components/schemas/RenewalStatus'
        DomainValidationOptions:
          $ref: '#/components/schemas/DomainValidationList'
      description: 'Contains information about the status of ACM''s <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This structure exists only when the certificate type is <code>AMAZON_ISSUED</code>.'
    RequestCertificateRequest:
      type: object
      required:
        - DomainName
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainNameString'
        SubjectAlternativeNames:
          $ref: '#/components/schemas/DomainList'
        IdempotencyToken:
          $ref: '#/components/schemas/IdempotencyToken'
        DomainValidationOptions:
          $ref: '#/components/schemas/DomainValidationOptionList'
    RequestCertificateResponse:
      type: object
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
    RequestInProgressException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The certificate request is in process and the certificate in your account has not yet been issued.
    ResendValidationEmailRequest:
      type: object
      required:
        - CertificateArn
        - Domain
        - ValidationDomain
      properties:
        CertificateArn:
          $ref: '#/components/schemas/Arn'
        Domain:
          $ref: '#/components/schemas/DomainNameString'
        ValidationDomain:
          $ref: '#/components/schemas/DomainNameString'
    ResourceInUseException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The certificate is in use by another AWS service in the caller's account. Remove the association and try again.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: 'The specified certificate cannot be found in the caller''s account, or the caller''s account cannot be found.'
    RevocationReason:
      type: string
      enum:
        - UNSPECIFIED
        - KEY_COMPROMISE
        - CA_COMPROMISE
        - AFFILIATION_CHANGED
        - SUPERCEDED
        - CESSATION_OF_OPERATION
        - CERTIFICATE_HOLD
        - REMOVE_FROM_CRL
        - PRIVILEGE_WITHDRAWN
        - A_A_COMPROMISE
    String:
      type: string
    TStamp:
      type: string
      format: date-time
    Tag:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
        Value:
          $ref: '#/components/schemas/TagValue'
      description: A key-value pair that identifies or specifies metadata about an ACM resource.
    TagKey:
      type: string
      pattern: '[\p{L}\p{Z}\p{N}_.:\/=+\-@]*'
      minLength: 1
      maxLength: 128
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 1
      maxItems: 50
    TagValue:
      type: string
      pattern: '[\p{L}\p{Z}\p{N}_.:\/=+\-@]*'
      minLength: 0
      maxLength: 256
    TooManyTagsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request contains too many tags. Try the request again with fewer tags.
    ValidationEmailList:
      type: array
      items:
        $ref: '#/components/schemas/String'
  parameters:
    Action:
      name: Action
      in: header
      required: true
      schema:
        type: string
    Version:
      name: Version
      in: header
      required: true
      schema:
        type: string
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
